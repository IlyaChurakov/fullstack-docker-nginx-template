КРАТКИЙ ЭКСКУРС ПО СТРУКТУРЕ ПРОЕКТА:

    * common - данная дирректория содержит основные переиспользуемые и базовые конструкции на основе которые создаются 
    основыне элеменыты сервисов (контроллеры, промежуточные обработчики и.т.д)

    * config - данная дирректория содержит сервис для работы с .env и другими конфигурационными рассширениями.

    * database - в данной директории содержатся сервисы по работе с базами данных. В данном случае используется ORM Prisma, но
    если в проекте будет использоваться MongoDB или что то еще, то нужно посто в данной папке создать отдельный сервис для этого
    подключения.

    *  errors - в данной папке содержится Exeption Filter, простыми словами перезватчик ошибок (Его возможно стоит довести до ума) но на 
    базовом уровне он работает.

    * middleware - содержит промежуточные обработчики как локальыне так и глобальные.

    * logger - сервис логгирования.

    * example - пример созвания сервиса проета.

    * types (директория) - содержит файл custom.d.ts в котором можно глобально переоределить нужынй системынй тип, например Request Express.

    * app.ts (файл) - класс приложения в котором происходит подключения всех зависимостей.

    * main.ts (файл) - это корневой файл проекта в котором как раз создается экземпляр приложения.

    * types.ts (файл) - словарь символьного обозначения сервисов в системе DI для внедрения их в разных частях приложения.

    * di.ts (файл) - как раз файл внедрения зависимомтей.


ЧТО ТРЕБУЕТСЯ ДЛЯ СТАРТА:
    1) Установка зависомостей
    2) Создание файла env в корне (даже если отсутсвуют переменные окружения)
    3) Инициализации БД (если используйте предложенныей вариант с Prisma ORM)

    [ENV REQUIRE]
    В базовом варианте для корректной инициализации БД тредутеся указать DATABASE_URL="..."
    Создание .env файла, даже в том случае если в проекте нет переменных окружения обусловненно  тем 
    что при запуске сервера Config Service успешно изициализируется, если он нащел хотябы один конфигурационный файл (по дефолту ищет ENV)
    но если это критически не нужно то это можно отключить в самом Config Service.

    [COMAND PIPELINE]
    $ npm install

    $ npx prisma init --datasource-provider [DB_PROVIDER] --url [DB_URL]  (инициализация ORM Prisma в проекте)
    пример npx prisma init --datasource-provider mysql --url mysql://user:password@localhost:3306/mydb

    $ npx prisma db pull  (синхронизация ORM с базой, генерирует описание схемы бд)

    $ npx prisma generate (если синхронизация с БД не упала с ошибкой, то требуется сгенерировать локальынй клиент
    клиент будет создан в node_modules/@prisma/client)

    $ npm run dev (старт проета)



!!! ДЛЯ ДЛЯ ПОДРОБНОГО ОБЪЯСНЕНИЯ ТОГО, КАК РАБОТАЕТ ПРОЕТК ВАМ НАД КУПИТЬ МОИ КУРСЫ "Как стать сеньором за год не умея прогать"!!!




